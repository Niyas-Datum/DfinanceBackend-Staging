using Dfinance.Application.Services.General.Interface;
using Dfinance.AuthAppllication.Services.Interface;
using Dfinance.Core.Infrastructure;
using Dfinance.DataModels.Dto.Inventory.Purchase;
using Dfinance.Inventory;
using Dfinance.Inventory.Service.Interface;
using Dfinance.Item.Services.Inventory.Interface;
using Dfinance.Purchase.Services.Interface;
using Dfinance.Shared.Deserialize;
using Dfinance.Shared.Domain;
using Dfinance.Stakeholder.Services.Interface;
using Dfinance.Warehouse.Services.Interface;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Transactions;
namespace Dfinance.Purchase.Services
{
    public class PurchaseService : IPurchaseService
    {

        private readonly DFCoreContext _context;
        private readonly IAuthService _authService;
        private readonly IHostEnvironment _environment;
        private readonly ILogger<PurchaseService> _logger;
        private readonly IInventoryTransactionService _transactionService;
        private readonly IInventoryAdditional _additionalService;
        private readonly IInventoryItemService _itemService;
        private readonly IInventoryPaymentService _paymentService;
        private readonly DataRederToObj _rederToObj;
        private readonly IItemMasterService _item;
        private readonly IWarehouseService _warehouse;
        private readonly ICustomerSupplierService _party;
        private readonly ICostCentreService _costCentre;
        private readonly CommonService _com;
        private readonly ISettingsService _settings;
        private readonly IInventoryTransFactory _inventoryTransFactory;

        public PurchaseService(DFCoreContext context, IAuthService authService, IHostEnvironment hostEnvironment,
            ILogger<PurchaseService> logger, IInventoryTransactionService transactionService, IInventoryAdditional inventoryAdditional,
            IInventoryItemService inventoryItemService, IInventoryPaymentService inventoryPaymentService, DataRederToObj rederToObj, IItemMasterService item,
            IWarehouseService warehouse, ICostCentreService costCentre, ICustomerSupplierService party, CommonService com, ISettingsService settings)       
        {
            _context = context;
            _authService = authService;
            _environment = hostEnvironment;
            _logger = logger;         
            _transactionService = transactionService;
            _additionalService = inventoryAdditional;
            _itemService = inventoryItemService;
            _paymentService = inventoryPaymentService;
            _rederToObj = rederToObj;
            _item = item;
            _warehouse = warehouse;
            _costCentre = costCentre;
            _party = party;
            _com = com;
            _settings = settings;
        }
       
        //getting new autogenerated voucherNo,dropdown for projects,warehouse dropdown,
        public CommonResponse GetData(int pageId,int voucherId)
        {           
            var voucherNo1 = _transactionService.GetAutoVoucherNo(voucherId);
            var voucherNo = voucherNo1.Data;
            var costcentre1 = _costCentre.FillCostCentre();
            var costcentre= costcentre1.Data;
            var warehouse1 = _warehouse.WarehouseDropdownUsingBranch();
            var warehouse = warehouse1.Data;
            return CommonResponse.Ok(new {VNo=voucherNo,CostCentre=costcentre,WareHouse=warehouse});
        }

        /// <summary>
        /// fill transaction items
        /// </summary>
        /// <param name="partyId"></param>
        /// <param name="PageId"></param>
        /// <param name="locId"></param>
        /// <param name="voucherId"></param>
        /// <returns></returns>
        public CommonResponse FillTransItems(int partyId, int PageID, int locId,int voucherId)
        {            
            var res = _item.FillTransItems(partyId, PageID, locId, voucherId);
            return CommonResponse.Ok(res);
        }
        /// <summary>
        /// fill left grid
        /// </summary>
        /// <param name="PageId"></param>
        /// <param name="post"></param>
        /// <returns></returns>
        public CommonResponse FillPurchase(int PageId, bool? post)
        {
            try
            {
                int branchid = _authService.GetBranchId().Value;
                var data = _context.Fillvoucherview.FromSqlRaw($"Exec LeftGridMasterSP @Criteria='FillVoucher',@BranchID='{branchid}',@MaPageMenuID={PageId},@Posted={post}").ToList();
                return CommonResponse.Ok(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return CommonResponse.Error(ex);
            }

        }
        /// <summary>
        /// Fill PurchaseById
        /// </summary>
        /// <param name="TransId"></param>
        /// <returns></returns>
        public CommonResponse FillPurchaseById(int TransId)
        {
            try
            {
                string criteria = "Fill";
                PurchaseFillByIdDto purchaseFillByIdDto = new PurchaseFillByIdDto();

                _context.Database.OpenConnection();

                using (var dbCommand = _context.Database.GetDbConnection().CreateCommand())
                {
                    dbCommand.CommandText = $"Exec VoucherSP @Criteria='{criteria}',@TransactionID='{TransId}'";

                    using (var reader = dbCommand.ExecuteReader())
                    {
                        purchaseFillByIdDto.fillTransactions = _rederToObj.Deserialize<FillTransactions>(reader).FirstOrDefault();
                        reader.NextResult();                       
                        purchaseFillByIdDto.fillTransactionEntries = _rederToObj.Deserialize<FillTransactionEntries>(reader).ToList();
                        reader.NextResult();
                        purchaseFillByIdDto.fillVoucherAllocationUsingRef = _rederToObj.Deserialize<FillVoucherAllocationUsingRef>(reader).FirstOrDefault();
                        reader.NextResult();
                        purchaseFillByIdDto.fillCheques = _rederToObj.Deserialize<FillCheques>(reader).FirstOrDefault();
                        reader.NextResult();
                        purchaseFillByIdDto.fillTransCollnAllocations = _rederToObj.Deserialize<FillTransCollnAllocations>(reader).FirstOrDefault();
                        reader.NextResult();
                        purchaseFillByIdDto.fillInvTransItems = _rederToObj.Deserialize<FillInvTransItems>(reader).ToList();
                        reader.NextResult();
                        purchaseFillByIdDto.fillInvTransItemDetails = _rederToObj.Deserialize<FillInvTransItemDetails>(reader).FirstOrDefault();
                        reader.NextResult();
                        purchaseFillByIdDto.fillTransactionItemExpenses = _rederToObj.Deserialize<FillTransactionItemExpenses>(reader).FirstOrDefault();
                        reader.NextResult();
                        //purchaseFillByIdDto.fillDocuments = _rederToObj.Deserialize<FillDocuments>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransactionExpenses = _rederToObj.Deserialize<FillTransactionExpenses>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillDocumentRequests = _rederToObj.Deserialize<FillDocumentRequests>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillDocumentReferences = _rederToObj.Deserialize<FillDocumentReferences>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransactionReferences = _rederToObj.Deserialize<FillTransactionReferences>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransLoadSchedules = _rederToObj.Deserialize<FillTransLoadSchedules>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransCollections = _rederToObj.Deserialize<FillTransCollections>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransEmployees = _rederToObj.Deserialize<FillTransEmployees>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.vMFuelLog = _rederToObj.Deserialize<VMFuelLog>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillDocumentImages = _rederToObj.Deserialize<FillDocumentImages>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillHRFinalSettlement = _rederToObj.Deserialize<FillHRFinalSettlement>(reader).FirstOrDefault();
                        //reader.NextResult();
                        //purchaseFillByIdDto.fillTransCostAllocations = _rederToObj.Deserialize<FillTransCostAllocations>(reader).FirstOrDefault();
                        //reader.NextResult();
                    }
                }

                if (purchaseFillByIdDto.fillTransactions != null)
                {
                    return CommonResponse.Ok(purchaseFillByIdDto);
                }

                return CommonResponse.NotFound("Purchase not found");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return CommonResponse.Error(ex);
            }
            finally
            {
                _context.Database.CloseConnection();
            }
        }

        /// <summary>
        /// Save Purchase
        /// </summary>
        /// <param name="purchaseDto"></param>
        /// <param name="PageId"></param>
        /// <param name="VoucherId"></param>
        /// <returns></returns>
        public CommonResponse SavePurchase(PurchaseDto purchaseDto, int PageId,int voucherId)
        {
            using (var transactionScope = new TransactionScope())

            {
                try
                {
                    //int VoucherId=_com.GetVoucherId(PageId);
                    string Status = "Approved";
                    int TransId = (int)_transactionService.SaveTransaction(purchaseDto, PageId, voucherId, Status).Data;

                    int transpayId = (int)_transactionService.SaveTransactionPayment(purchaseDto, TransId, Status).Data;
                    if (purchaseDto.FiTransactionAdditionalDto != null)
                    {
                        _additionalService.SaveTransactionAdditional(purchaseDto.FiTransactionAdditionalDto, TransId);
                    }
                    if (purchaseDto.Items != null && voucherId == 17)
                    {
                        _itemService.SaveInvTransItems(purchaseDto, voucherId, TransId);
                    }
                    if (purchaseDto.TransactionEntries != null)
                    {

                        int TransEntId = (int)_paymentService.SaveTransactionEntries(purchaseDto, PageId, TransId, transpayId).Data ;

                        List<int> transpaIdList = new List<int>();

                        if (purchaseDto.TransactionEntries.Advance != null && purchaseDto.TransactionEntries.Advance.Any())
                        {
                            foreach (var adv in purchaseDto.TransactionEntries.Advance)
                            {
                                if (adv.VID != 0)
                                {
                                    transpaIdList.Add(adv.VID.Value);
                                }
                                else
                                {
                                    transpaIdList.Add(transpayId);
                                }
                            }
                        }
                        _transactionService.SaveVoucherAllocation(transpayId, TransEntId, purchaseDto.Supplier.Id, purchaseDto.TransactionEntries.GrandTotal, transpaIdList);


                        if (purchaseDto.Reference.Count > 0 && purchaseDto.Reference.Select(x => x.Id).FirstOrDefault() != 0)
                        {
                            List<int?> referIds = purchaseDto.Reference.Select(x => x.Id).ToList();


                            _transactionService.SaveTransReference(TransId, referIds);
                        }
                    }

                    transactionScope.Complete();
                    return CommonResponse.Created("Created Successfully");
                }
                catch (Exception ex)
                {

                    transactionScope.Dispose();
                    return CommonResponse.Error();
                }
            }
        }
        /// <summary>
        /// Update Purchace
        /// </summary>
        /// <param name="purchaseDto"></param>
        /// <param name="PageId"></param>
        /// <param name="VoucherId"></param>
        /// <returns></returns>
        public CommonResponse UpdatePurchase(PurchaseDto purchaseDto, int PageId, int voucherId)
        {
            using (var transactionScope = new TransactionScope())

            {
                try
                {
                    //int VoucherId = _com.GetVoucherId(PageId);
                    string Status = "Approved";
                    int TransId = (int)_transactionService.SaveTransaction(purchaseDto, PageId, voucherId, Status).Data;

                    int transpayId = (int)_transactionService.SaveTransactionPayment(purchaseDto, TransId, Status).Data;

                    if (purchaseDto.FiTransactionAdditionalDto != null)
                    {
                        _additionalService.UpdateTransactionAdditional(purchaseDto.FiTransactionAdditionalDto, TransId);
                    }
                    if (purchaseDto.Items != null)
                    {
                        _itemService.UpdateInvTransItems(purchaseDto, voucherId, TransId);
                    }
                    if (purchaseDto.TransactionEntries != null)
                    {

                        int TransEntId =(int) _paymentService.SaveTransactionEntries(purchaseDto, PageId, TransId, transpayId).Data ;

                        List<int> transpaIdList = new List<int>();

                        if (purchaseDto.TransactionEntries.Advance != null && purchaseDto.TransactionEntries.Advance.Any())
                        {
                            foreach (var adv in purchaseDto.TransactionEntries.Advance)
                            {
                                if (adv.VID != 0)
                                {
                                    transpaIdList.Add(adv.VID.Value);
                                }
                                else
                                {
                                    transpaIdList.Add(transpayId);
                                }
                            }

                        }
                        _transactionService.UpdateVoucherAllocation(transpayId, TransEntId, purchaseDto.Supplier.Id, purchaseDto.TransactionEntries.GrandTotal, transpaIdList);

                        if (purchaseDto.Reference.Count > 0 && purchaseDto.Reference.Select(x => x.Id).FirstOrDefault() != 0)
                        {
                            List<int?> referIds = purchaseDto.Reference.Select(x => x.Id).ToList();


                            _transactionService.UpdateTransReference(TransId, referIds);
                        }
                    }
                    transactionScope.Complete();
                    return CommonResponse.Created("Update Successfully");
                }

                catch (Exception ex)
                {

                    transactionScope.Dispose();
                    return CommonResponse.Error();
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="TransId"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>


        public CommonResponse DeletePurchase(int TransId)
        {
            try
            {
                var result = _transactionService.DeletePurchase(TransId);
                return CommonResponse.Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return CommonResponse.Error(ex);
            }
        }
    }
}
