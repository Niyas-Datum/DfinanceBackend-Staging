// <auto-generated />
using System;
using Dfinance.Core.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dfinance.Core.Migrations
{
    [DbContext(typeof(DFCoreContext))]
    [Migration("20230911103937_Macompany_Department_ReDepartment")]
    partial class Macompany_Department_ReDepartment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dfinance.Core.Domain.FiMaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountCategory")
                        .HasColumnType("int");

                    b.Property<int>("AccountGroup")
                        .HasColumnType("int");

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Alias")
                        .HasColumnType("int");

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalAccount")
                        .HasColumnType("int");

                    b.Property<int?>("GroupOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBillWise")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCollection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCostCentre")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsItemwise")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<bool?>("PreventExtraPay")
                        .HasColumnType("bit");

                    b.Property<int?>("SortField")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroup")
                        .HasColumnType("int");

                    b.Property<bool>("SystemAccount")
                        .HasColumnType("bit");

                    b.Property<bool?>("ValueOfGoods")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FiMaAccounts");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountBranchId")
                        .HasColumnType("int")
                        .HasColumnName("AccountBranchID");

                    b.Property<byte>("ActiveFlag")
                        .HasColumnType("tinyint");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("BranchCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("BranchCompanyID");

                    b.Property<string>("BulidingNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CentralSalesTaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ContactPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPersonID");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dl1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DL1");

                    b.Property<string>("Dl2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DL2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HocompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HOCompanyName");

                    b.Property<string>("HocompanyNameArabic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HOCompanyNameArabic");

                    b.Property<bool?>("LockSystem")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Pobox")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("POBox");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesTaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("UniqueID");

                    b.HasKey("Id");

                    b.HasIndex("BranchCompanyId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("MaCompanies", (string)null);
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ActiveFlag")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentTypeID");

                    b.Property<int>("MaEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("MaEmployeeId");

                    b.ToTable("MaDepartments");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBranchId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBranchID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocationRestrictedUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("ResidenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Employees");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "UserName" }, "IX_MaEmployees")
                        .IsUnique();

                    b.ToTable("MaEmployees");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.ReDepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ActiveFlag")
                        .HasColumnType("tinyint");

                    b.Property<int>("CreatedBranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBranchId");

                    b.ToTable("ReDepartmentTypes");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaCompany", b =>
                {
                    b.HasOne("Dfinance.Core.Domain.MaCompany", "BranchCompany")
                        .WithMany("InBranchCompany")
                        .HasForeignKey("BranchCompanyId")
                        .HasConstraintName("FK_MaCompanies_MaCompanies1");

                    b.HasOne("Dfinance.Core.Domain.MaEmployee", "ContactPerson")
                        .WithMany("MaCompanyContactPeople")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_MaCompanies_MaEmployees");

                    b.HasOne("Dfinance.Core.Domain.MaEmployee", "CreatedByConnect")
                        .WithMany("MaCompanyCreatedByConnection")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_MaCompanies_MaEmployees1");

                    b.Navigation("BranchCompany");

                    b.Navigation("ContactPerson");

                    b.Navigation("CreatedByConnect");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaDepartment", b =>
                {
                    b.HasOne("Dfinance.Core.Domain.MaCompany", "Branch")
                        .WithMany("MaDepartments")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_MaDepartments_MaCompanies");

                    b.HasOne("Dfinance.Core.Domain.ReDepartmentType", "DepartmentType")
                        .WithMany("MaDepartments")
                        .HasForeignKey("DepartmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MaDepartments_MaDepartments");

                    b.HasOne("Dfinance.Core.Domain.MaEmployee", "MaEmployee")
                        .WithMany()
                        .HasForeignKey("MaEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("DepartmentType");

                    b.Navigation("MaEmployee");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaEmployee", b =>
                {
                    b.HasOne("Dfinance.Core.Domain.FiMaAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.ReDepartmentType", b =>
                {
                    b.HasOne("Dfinance.Core.Domain.MaCompany", "CreatedBranch")
                        .WithMany()
                        .HasForeignKey("CreatedBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBranch");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaCompany", b =>
                {
                    b.Navigation("InBranchCompany");

                    b.Navigation("MaDepartments");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.MaEmployee", b =>
                {
                    b.Navigation("MaCompanyContactPeople");

                    b.Navigation("MaCompanyCreatedByConnection");
                });

            modelBuilder.Entity("Dfinance.Core.Domain.ReDepartmentType", b =>
                {
                    b.Navigation("MaDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
